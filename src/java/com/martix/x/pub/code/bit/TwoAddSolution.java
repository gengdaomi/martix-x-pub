package com.martix.x.pub.code.bit;

/**
 * Created by Andrew-Geng on 16:31 2023/1/5
 *
 * 剑指 Offer 65. 不用加减乘除做加法
 *
 * 写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。
 *
 *
 * 示例:
 *
 * 输入: a = 1, b = 1
 * 输出: 2
 *
 */
public class TwoAddSolution {

    /**
     * 位运算
     *
     * 预备知识
     *
     * 有符号整数通常用补码来表示和存储，补码具有如下特征：
     *
     * 正整数的补码与原码相同；负整数的补码为其原码除符号位外的所有位取反后加1。
     * 可以将减法运算转化为补码的加法运算来实现。
     * 符号位与数值位可以一起参与运算。
     *
     *
     * 首先，考虑两个二进制位相加的四种情况如下：
     *
     *
     * 0 + 0 = 0
     * 0 + 1 = 1
     * 1 + 0 = 1
     * 1 + 1 = 0 (进位)
     *
     *
     *
     * 不考虑进位的情况下，其无进位加法结果为a+b;
     * 而所有需要进位的位为a & b，进位后的进位结果为(a & b) << 1;
     *
     * 我们可以将整数a 和b 的和，拆分为a 和 b 的无进位加法结果与进位结果的和。
     * 因为每一次拆分都可以让需要进位的最低位至少左移一位，又因为a 和b 可以取到负数，所以我们最多需要  log(max_int) 次拆分即可完成运算。
     *
     * 因为有符号整数用补码来表示，所以以上算法也可以推广到0 和负数。
     *
     * @param a
     * @param b
     * @return
     */
    public int add(int a, int b) {
        while (b != 0) {
            int carry = (a & b) << 1;
            a = a ^ b;
            b = carry;
        }

        return a;
    }
}
