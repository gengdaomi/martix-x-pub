package com.martix.x.pub.code.bit;

/**
 * Created by Andrew-Geng on 11:35 2022/11/29
 * 位1的个数 lc 191
 * <p>
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）
 * <p>
 * 示例 1：
 * <p>
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 示例 2：
 * <p>
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * <p>
 * 示例 3：
 * <p>
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'
 */
public class CountBitOneSolution {

    /**
     * 核心思路：循环检查二进制位
     * <p>
     * 直接循环检查给定整数n 的二进制位的每一位是否为1；
     * 当检查第i 位时，我们可以让n 与 2^i进行与运算，当且仅当n 的第i 位为1 时，运算结果不为0。
     * <p>
     * 时间复杂度O(k),其中k为int型的二进制位数，k=32；我们需要检查二进制位的每一位，一共32位；
     * 空间复杂度O(1)
     *
     * @param n
     * @return
     */
    public int hammingWeight(int n) {
        int result = 0;

        for (int i = 0; i < 32; i++) {
            if ((n & (1 << i)) != 0) {
                result++;
            }

        }
        return result;
    }

    /**
     * 位运算优化
     *
     * 不断让当前的n 与n−1 做与运算，直到n 变为0 即可。
     * 因为每次运算会使得n 的最低位的1 被翻转，因此运算次数就等于n 的二进制位中1 的个数。
     *
     * 时间复杂度O(logn),n等于二进制中1的个数，我们需要循环logn次；
     * 空间复杂度O(1)
     *
     * @param n
     * @return
     */
    public int hammingWeight_1(int n) {
        int result = 0;
        while (n != 0) {
            n &= n - 1;
            result++;
        }

        return result;
    }

}
