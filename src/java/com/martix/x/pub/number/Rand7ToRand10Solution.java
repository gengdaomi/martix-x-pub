package com.martix.x.pub.number;

import java.util.concurrent.ThreadLocalRandom;

/**
 * Created by Andrew-Geng on 11:12 2022/9/12
 * <p>
 * 用 Rand7() 实现 Rand10() lc 470
 * <p>
 * 给定方法rand7可生成 [1,7] 范围内的均匀随机整数，试写一个方法rand10生成 [1,10] 范围内的均匀随机整数。
 * 你只能调用rand7()且不能调用其他方法。请不要使用系统的Math.random()方法。
 * 每个测试用例将有一个内部参数 n，即你实现的函数 rand10() 在测试时将被调用的次数。请注意，这不是传递给 rand10() 的参数。
 *
 * 输入: 1
 * 输出: [2]
 *
 * 输入: 2
 * 输出: [2,8]
 *
 * 输入: 3
 * 输出: [3,8,10]
 */
public class Rand7ToRand10Solution extends Solbase {

    public static void main(String[] args){
        int x = new Rand7ToRand10Solution().rand10();
        System.out.println(x);
    }

    /**
     * 现在要从rand7() 到 rand10()，也要求是等概率的，那只要我们把小的数映射到一个大的数就好办了，
     * 那首先想到的办法是乘个两倍试一试，每个rand7() 它能生成数的范围是rand 两次，那么数的范围就变为2～14，
     * 哦，你可能发现没有1 了，想要再减去个1 来弥补， rand7()+rand7()−1;
     * 其实这样是错误的做法，因为对于数字5 这种，你有两种组合方式 (2+3or3+2)，而对于14，你只有一种组合方式(7+7)，它并不是等概率的，
     * 那么简单的加减法不能使用，因为它会使得概率不一致，
     *
     * 我们的方法是利用乘法，一般思路如下面这样构建 (Rand7()-1)*7+Rand7()
     * 1.首先 rand7()−1 得到的数的集合为 {0,1,2,3,4,5,6}
     * 2.再乘以7得到集合A为{0,7,14,21,28,35,42}
     * 3.后面rand7()得到集合B为{1,2,3,4,5,6,7}
     *
     * 为啥不乘以6或5等其他数，而是选择乘以7 ？ 因为乘以7才能是结果等概率生成：
     * 得到的集合A 和 B，利用这两个集合，得到的数的范围是1～49，每个数它显然是等概率出现的，因为这两个事件是独立事件，P(AB)=P(A)*P(B)=1/7 * 1/7
     *
     *
     * 下面这样实现 性能极其慢，原因是 我们得到的函数是1-49之间的值，而我们只想得到1-10之间的数，这部分占比低，可能需要循环多次且丢很多数才能满足
     *
     * @return
     */
    public int rand10() {
        // 首先得到一个数
        int num = (rand7() - 1) * 7 + rand7();
        // 只要它还大于10，那就给我不断生成，因为我只要范围在1-10的，最后直接返回就可以了
        while (num > 10){
            num = (rand7() - 1) * 7 + rand7();
        }
        return num;
    }

    /**
     * 优化版
     *  解决上面性能低的思路：
     *  就是舍弃一部分数，舍弃41～49，因为是独立事件，我们生成的1～40 之间的数它是等概率的，
     *  我们最后完全可以利用1～40 之间的数来得到1～10 之间的数。所以，我们的代码可以改成下面这样
     * @return
     */
    public int rand10_1() {
        // 首先得到一个数
        int num = (rand7() - 1) * 7 + rand7();
        // 只要它还大于40，那你就给我不断生成吧
        while (num > 40){
            num = (rand7() - 1) * 7 + rand7();
        }

        // 返回结果，+1是为了解决 40%10为0的情况
        return 1 + num % 10;

    }

    /**
     * 最优版本
     *
     * 更进一步，这时候我们舍弃了9 个数，舍弃的还是有点多，效率还是不高。
     * 那就是舍弃的数最好再少一点！因为这样能让while 循环少转几次，那么对于大于40 的随机数，别舍弃呀，利用这9 个数，再利用那个公式操作一下：
     *(大于40的随机数−40−1)*7+rand7()
     *
     * 这样我们可以得到1−63 之间的随机数，只要舍弃3 个即可，那对于这3个舍弃的，还可以再来一轮：
     * (大于60的随机数−60−1)*7+rand7()
     *
     * 这样我们可以得到1−21 之间的随机数，只要舍弃1 个即可
     *
     * @return
     */
    public int rand10_perfect() {
        while (true){
            int num = (rand7() - 1) * 7 + rand7();

            // 如果在40以内，那就直接返回
            if(num <= 40){
                return 1 + num % 10;
            }

            // 说明刚才生成的在41-49之间，利用随机数再操作一遍
            num = (num - 40 - 1) * 7 + rand7();
            if(num <= 60){
                return 1 + num % 10;
            }

            // 说明刚才生成的在61-63之间，利用随机数再操作一遍
            num = (num - 60 - 1) * 7 + rand7();

            if(num <= 20){
                return 1 + num % 10;
            }
        }
    }

}

/**
 * 这个是系统默认提供的基础类
 */
 class Solbase{

    protected int rand7(){
        return ThreadLocalRandom.current().nextInt(7);
    }
}
